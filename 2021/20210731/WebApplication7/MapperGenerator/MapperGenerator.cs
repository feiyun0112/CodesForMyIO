using System;
using System.Text.RegularExpressions;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using Microsoft.CodeAnalysis.CSharp;
using System.Linq;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Collections.Immutable;

namespace AutoMapperGenerator
{
    [Generator]
    public class AutoMapperGenerator : ISourceGenerator
    {
        private const string MappingAttributeText = @"
using System;
namespace AutoMapperGenerator
{
    public class AutoMappingAttribute : Attribute
    {
        public AutoMappingAttribute(Type fromType,Type toType)
        {
            this.FromType = fromType;
            this.ToType = toType;
        }

        public Type FromType { get; set; }
        public Type ToType { get; set; }
    }
}";

        public void Initialize(GeneratorInitializationContext context)
        {
        }

        public void Execute(GeneratorExecutionContext context)
        {
            context.AddSource("AutoMappingAttribute", SourceText.From(MappingAttributeText, Encoding.UTF8));

            var options = (context.Compilation as CSharpCompilation).SyntaxTrees[0].Options as CSharpParseOptions;
            var compilation = context.Compilation.AddSyntaxTrees(CSharpSyntaxTree.ParseText(SourceText.From(MappingAttributeText, Encoding.UTF8), options));

            var allNodes = compilation.SyntaxTrees.SelectMany(s => s.GetRoot().DescendantNodes());
            var allAttributes = allNodes.Where((d) => d.IsKind(SyntaxKind.Attribute)).OfType<AttributeSyntax>();
            var attributes = allAttributes.Where(d => d.Name.ToString() == "AutoMapping").ToList();

            var allClasses = compilation.SyntaxTrees.
               SelectMany(x => x.GetRoot().DescendantNodes().OfType<ClassDeclarationSyntax>());

            var sourceBuilder = new StringBuilder(@"
//<auto-generated>
namespace AutoMapperGenerator
{
    public static class Mapper
    {");
            foreach (AttributeSyntax attr in attributes)
            {
                var fromTypeArgSyntax = attr.ArgumentList.Arguments.First();
                var fromTypeArgSyntaxExpr = fromTypeArgSyntax.Expression.NormalizeWhitespace().ToFullString();

                var toTypeArgSyntax = attr.ArgumentList.Arguments.ElementAt(1);
                var toTypeArgSyntaxExpr = toTypeArgSyntax.Expression.NormalizeWhitespace().ToFullString();

                var fromClassName = GetContentInParentheses(fromTypeArgSyntaxExpr);
                var fromClassSyntax = allClasses.First(x => x.Identifier.ToString() == fromClassName);
                var fromClassModel = compilation.GetSemanticModel(fromClassSyntax.SyntaxTree);
                var fromClassNamedTypeSymbol = ModelExtensions.GetDeclaredSymbol(fromClassModel, fromClassSyntax);
                var fromClassFullName = fromClassNamedTypeSymbol.OriginalDefinition.ToString();

                var toClassName = GetContentInParentheses(toTypeArgSyntaxExpr);
                var toClassSyntax = allClasses.First(x => x.Identifier.ToString() == toClassName);
                var toClassModel = compilation.GetSemanticModel(toClassSyntax.SyntaxTree);
                var toClassNamedTypeSymbol = ModelExtensions.GetDeclaredSymbol(toClassModel, toClassSyntax);
                var toClassFullName = toClassNamedTypeSymbol.OriginalDefinition.ToString();           

                sourceBuilder.Append($@"
        public static {toClassFullName} To{toClassName}(this {fromClassFullName} source)
        {{
            var target = new {toClassFullName}();");

                var propertySyntaxes = toClassSyntax.SyntaxTree.GetRoot().DescendantNodes().OfType<PropertyDeclarationSyntax>();
                foreach (var propertySyntaxe in propertySyntaxes)
                {
                    var symbol = toClassModel.GetDeclaredSymbol(propertySyntaxe);
                    var propertyName = symbol.Name;
                    sourceBuilder.Append($@"
            target.{propertyName} = source.{propertyName};");
                }

                sourceBuilder.Append(@"
            return target;
        }
");

               

            }
            sourceBuilder.Append(@"
    }
}");

            context.AddSource("Mapper", SourceText.From(sourceBuilder.ToString(), Encoding.UTF8));

        }

        private string GetContentInParentheses(string value)
        {
            var match = Regex.Match(value, @"\(([^)]*)\)");
            return match.Groups[1].Value;
        }
    }
}
